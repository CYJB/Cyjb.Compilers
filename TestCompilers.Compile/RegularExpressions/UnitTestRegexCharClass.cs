using System.Text.RegularExpressions;
using Cyjb.Compilers.RegularExpressions;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace TestCompilers.RegularExpressions
{
	/// <summary>
	/// <see cref="RegexCharClass"/> 类的单元测试。
	/// </summary>
	[TestClass]
	public class UnitTestRegexCharClass
	{
		/// <summary>
		/// 对 <see cref="RegexCharClass.Parse"/> 方法进行测试。
		/// </summary>
		[DataTestMethod]
		[DataRow(@"", @"[]")]
		[DataRow(@"^", @"[^]")]
		[DataRow(@"aeiou", @"[aeiou]")]
		[DataRow(@"^aeiou", @"[^aeiou]")]
		[DataRow(@"abc", @"[a-c]")]
		[DataRow(@"a-c", @"[a-c]")]
		[DataRow(@"zciablpw;zpb[qob\]c", @"[;[\]a-cilo-qwz]")]
		[DataRow(@"\a\b\t\r\v\f\n\e\3\60\061\101\x32\*\u0033\cb\cD\c_\[", @"[\u0002-\u0004\a-\r\e\u001F*0-3A[]")]
		[DataRow(@"^-c", @"[^\-c]")]
		[DataRow(@"^c-", @"[^\-c]")]
		[DataRow(@"^--c", @"[^\--c]")]
		[DataRow(@"\w", @"[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Mn}\p{Nd}\p{Pc}]")]
		[DataRow(@"\W", @"[\P{Lu,Ll,Lt,Lm,Lo,Mn,Nd,Pc}]")]
		[DataRow(@"\d", @"[\p{Nd}]")]
		[DataRow(@"\D", @"[\P{Nd}]")]
		[DataRow(@"\s", @"[\t-\r\u0085\p{Zs}\p{Zl}\p{Zp}]")]
		[DataRow(@"\S", @"[\0-\b\u000E-\u001F\u007F-\u0084\u0086-\u009F\P{Zs,Zl,Zp,Cc}]")]
		[DataRow(@"\p{P}\d", @"[\p{Nd}\p{Pc}\p{Pd}\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}]")]
		[DataRow(@"^\p{P}\d", @"[^\p{Nd}\p{Pc}\p{Pd}\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}]")]
		[DataRow(@"\s\p{P}", @"[\t-\r\u0085\p{Zs}\p{Zl}\p{Zp}\p{Pc}\p{Pd}\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}]")]
		[DataRow(@"\p{L}", @"[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}]")]
		[DataRow(@"\p{M}", @"[\p{Mn}\p{Mc}\p{Me}]")]
		[DataRow(@"\p{N}", @"[\p{Nd}\p{Nl}\p{No}]")]
		[DataRow(@"\p{P}", @"[\p{Pc}\p{Pd}\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}]")]
		[DataRow(@"\p{S}", @"[\p{Sm}\p{Sc}\p{Sk}\p{So}]")]
		[DataRow(@"\p{Z}", @"[\p{Zs}\p{Zl}\p{Zp}]")]
		[DataRow(@"\p{C}", @"[\p{Cc}\p{Cf}\p{Cs}\p{Co}\p{Cn}]")]
		[DataRow(@"\S\p{Z}", @"[\0-\b\u000E-\u001F\u007F-\u0084\u0086-\u009F\P{Cc}]")]
		[DataRow(@"\p{Z}\S", @"[\0-\b\u000E-\u001F\u007F-\u0084\u0086-\u009F\P{Cc}]")]
		[DataRow(@"\P{Z}\p{Zs}", @"[\P{Zl,Zp}]")]
		[DataRow(@"\S\p{Z}\P{Zs}", @"[\0-\uFFFF]")]
		[DataRow(@"\p{Z}\S\P{Zs}", @"[\0-\uFFFF]")]
		[DataRow(@"0-9,a-zA-Z\w", @"[,\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Mn}\p{Nd}\p{Pc}]")]
		[DataRow(@"0-;\d", @"[:;\p{Nd}]")]
		[DataRow(@"--;\d", @"[\--;\p{Nd}]")]
		[DataRow(@"--9\d", @"[\--/\p{Nd}]")]
		[DataRow(@"a-z-[e-g]", @"[a-dh-z]")]
		[DataRow(@"a-z-[a-z]", @"[]")]
		[DataRow(@"e-g-[a-z]", @"[]")]
		[DataRow(@"^a-z-[e-g]", @"[^a-z]")]
		[DataRow(@"^a-z-[a-z]", @"[^a-z]")]
		[DataRow(@"^a-z-[0-9]", @"[^0-9a-z]")]
		[DataRow(@"^a-z-[^e-g]", @"[]")]
		[DataRow(@"^e-g-[^a-z]", @"[a-dh-z]")]
		[DataRow(@"\p{Z}-[\p{Zs}]", @"[\p{Zl}\p{Zp}]")]
		[DataRow(@"\p{Z}-[\p{Z}]", @"[]")]
		[DataRow(@"\p{Z}-[\P{Zs}]", @"[\p{Zs}]")]
		[DataRow(@"\p{Z}-[\P{Z}]", @"[\p{Zs}\p{Zl}\p{Zp}]")]
		[DataRow(@"\p{Zs}-[\p{Z}]", @"[]")]
		[DataRow(@"\p{Zs}-[\P{Z}]", @"[\p{Zs}]")]
		[DataRow(@"\P{Z}-[\p{Zs}]", @"[\P{Zs,Zl,Zp}]")]
		[DataRow(@"\P{Z}-[\p{Z}]", @"[\P{Zs,Zl,Zp}]")]
		[DataRow(@"\P{Z}-[\P{Zs}]", @"[]")]
		[DataRow(@"\P{Z}-[\P{Z}]", @"[]")]
		[DataRow(@"\P{Zs}-[\p{Z}]", @"[\P{Zs,Zl,Zp}]")]
		[DataRow(@"\P{Zs}-[\P{Z}]", @"[\p{Zl}\p{Zp}]")]
		[DataRow(@"a-z\p{Lu}\p{Ll}-[\p{Ll}]", @"[\p{Lu}]")]
		[DataRow(@"-[aeiou]", @"[\-[aeiou]")]
		public void TestParse(string pattern, string expected)
		{
			RegexCharClass charClass = RegexCharClass.Parse(pattern);
			Assert.AreEqual(expected, charClass.ToString());
		}

		/// <summary>
		/// 对 <see cref="RegexCharClass.Parse"/> <see cref="RegexOptions.IgnoreCase"/> 方法进行测试。
		/// </summary>
		[DataTestMethod]
		[DataRow(@"", @"[]")]
		[DataRow(@"^", @"[^]")]
		[DataRow(@"aeiou", @"[AEIOUaeiou]")]
		[DataRow(@"^aeiou", @"[^AEIOUaeiou]")]
		[DataRow(@"abc", @"[A-Ca-c]")]
		[DataRow(@"a-c", @"[A-Ca-c]")]
		[DataRow(@"zciablpw;zpb[qob\]c", @"[;A-CILO-QWZ[\]a-cilo-qwz]")]
		[DataRow(@"\a\b\t\r\v\f\n\e\3\60\061\101\x32\*\u0033\cb\cD\c_\[", @"[\u0002-\u0004\a-\r\e\u001F*0-3A[a]")]
		[DataRow(@"^-c", @"[^\-Cc]")]
		[DataRow(@"^c-", @"[^\-Cc]")]
		[DataRow(@"^--c", @"[^\--z]")]
		[DataRow(@"\w", @"[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Mn}\p{Nd}\p{Pc}]")]
		[DataRow(@"\W", @"[\P{Lu,Ll,Lt,Lm,Lo,Mn,Nd,Pc}]")]
		[DataRow(@"\d", @"[\p{Nd}]")]
		[DataRow(@"\D", @"[\P{Nd}]")]
		[DataRow(@"\s", @"[\t-\r\u0085\p{Zs}\p{Zl}\p{Zp}]")]
		[DataRow(@"\S", @"[\0-\b\u000E-\u001F\u007F-\u0084\u0086-\u009F\P{Zs,Zl,Zp,Cc}]")]
		[DataRow(@"\p{P}\d", @"[\p{Nd}\p{Pc}\p{Pd}\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}]")]
		[DataRow(@"^\p{P}\d", @"[^\p{Nd}\p{Pc}\p{Pd}\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}]")]
		[DataRow(@"\s\p{P}", @"[\t-\r\u0085\p{Zs}\p{Zl}\p{Zp}\p{Pc}\p{Pd}\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}]")]
		[DataRow(@"\p{L}", @"[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}]")]
		[DataRow(@"\p{M}", @"[\p{Mn}\p{Mc}\p{Me}]")]
		[DataRow(@"\p{N}", @"[\p{Nd}\p{Nl}\p{No}]")]
		[DataRow(@"\p{P}", @"[\p{Pc}\p{Pd}\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}]")]
		[DataRow(@"\p{S}", @"[\p{Sm}\p{Sc}\p{Sk}\p{So}]")]
		[DataRow(@"\p{Z}", @"[\p{Zs}\p{Zl}\p{Zp}]")]
		[DataRow(@"\p{C}", @"[\p{Cc}\p{Cf}\p{Cs}\p{Co}\p{Cn}]")]
		[DataRow(@"\S\p{Z}", @"[\0-\b\u000E-\u001F\u007F-\u0084\u0086-\u009F\P{Cc}]")]
		[DataRow(@"\p{Z}\S", @"[\0-\b\u000E-\u001F\u007F-\u0084\u0086-\u009F\P{Cc}]")]
		[DataRow(@"\P{Z}\p{Zs}", @"[\P{Zl,Zp}]")]
		[DataRow(@"\S\p{Z}\P{Zs}", @"[\0-\uFFFF]")]
		[DataRow(@"\p{Z}\S\P{Zs}", @"[\0-\uFFFF]")]
		[DataRow(@"0-9,a-zA-Z\w", @"[,\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Mn}\p{Nd}\p{Pc}]")]
		[DataRow(@"0-;\d", @"[:;\p{Nd}]")]
		[DataRow(@"--;\d", @"[\--;\p{Nd}]")]
		[DataRow(@"--9\d", @"[\--/\p{Nd}]")]
		[DataRow(@"a-z-[e-g]", @"[A-DH-Za-dh-z]")]
		[DataRow(@"a-z-[a-z]", @"[]")]
		[DataRow(@"e-g-[a-z]", @"[]")]
		[DataRow(@"^a-z-[e-g]", @"[^A-Za-z]")]
		[DataRow(@"^a-z-[a-z]", @"[^A-Za-z]")]
		[DataRow(@"^a-z-[0-9]", @"[^0-9A-Za-z]")]
		[DataRow(@"^a-z-[^e-g]", @"[]")]
		[DataRow(@"^e-g-[^a-z]", @"[A-DH-Za-dh-z]")]
		[DataRow(@"\p{Z}-[\p{Zs}]", @"[\p{Zl}\p{Zp}]")]
		[DataRow(@"\p{Z}-[\p{Z}]", @"[]")]
		[DataRow(@"\p{Z}-[\P{Zs}]", @"[\p{Zs}]")]
		[DataRow(@"\p{Z}-[\P{Z}]", @"[\p{Zs}\p{Zl}\p{Zp}]")]
		[DataRow(@"\p{Zs}-[\p{Z}]", @"[]")]
		[DataRow(@"\p{Zs}-[\P{Z}]", @"[\p{Zs}]")]
		[DataRow(@"\P{Z}-[\p{Zs}]", @"[\P{Zs,Zl,Zp}]")]
		[DataRow(@"\P{Z}-[\p{Z}]", @"[\P{Zs,Zl,Zp}]")]
		[DataRow(@"\P{Z}-[\P{Zs}]", @"[]")]
		[DataRow(@"\P{Z}-[\P{Z}]", @"[]")]
		[DataRow(@"\P{Zs}-[\p{Z}]", @"[\P{Zs,Zl,Zp}]")]
		[DataRow(@"\P{Zs}-[\P{Z}]", @"[\p{Zl}\p{Zp}]")]
		[DataRow(@"a-z\p{Lu}\p{Ll}-[\p{Ll}]", @"[]")]
		[DataRow(@"-[aeiou]", @"[\-AEIOU[aeiou]")]
		public void TestParseIgnoreCase(string pattern, string expected)
		{
			RegexCharClass charClass = RegexCharClass.Parse(pattern, RegexOptions.IgnoreCase);
			Assert.AreEqual(expected, charClass.ToString());
		}

		/// <summary>
		/// 对 <see cref="RegexCharClass.Parse"/> <see cref="RegexOptions.ECMAScript"/> 方法进行测试。
		/// </summary>
		[DataTestMethod]
		[DataRow(@"", @"[]")]
		[DataRow(@"^", @"[^]")]
		[DataRow(@"aeiou", @"[aeiou]")]
		[DataRow(@"^aeiou", @"[^aeiou]")]
		[DataRow(@"abc", @"[a-c]")]
		[DataRow(@"a-c", @"[a-c]")]
		[DataRow(@"zciablpw;zpb[qob\]c", @"[;[\]a-cilo-qwz]")]
		[DataRow(@"\a\b\t\r\v\f\n\e\3\60\061\101\x32\*\u0033\cb\cD\c_\[", @"[\u0002-\u0004\a-\r\e\u001F*0-3A[]")]
		[DataRow(@"^-c", @"[^\-c]")]
		[DataRow(@"^c-", @"[^\-c]")]
		[DataRow(@"^--c", @"[^\--c]")]
		[DataRow(@"\w", @"[0-9A-Z_a-z\u0130]")]
		[DataRow(@"\W", @"[\0-/:-@[-^`{-\u012F\u0131-\uFFFF]")]
		[DataRow(@"\d", @"[0-9]")]
		[DataRow(@"\D", @"[\0-/:-\uFFFF]")]
		[DataRow(@"\s", @"[\t-\r ]")]
		[DataRow(@"\S", @"[\0-\b\u000E-\u001F!-\uFFFF]")]
		[DataRow(@"\p{P}\d", @"[0-9\p{Pc}\p{Pd}\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}]")]
		[DataRow(@"^\p{P}\d", @"[^0-9\p{Pc}\p{Pd}\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}]")]
		[DataRow(@"\s\p{P}", @"[\t-\r \p{Pc}\p{Pd}\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}]")]
		[DataRow(@"\p{L}", @"[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}]")]
		[DataRow(@"\p{M}", @"[\p{Mn}\p{Mc}\p{Me}]")]
		[DataRow(@"\p{N}", @"[\p{Nd}\p{Nl}\p{No}]")]
		[DataRow(@"\p{P}", @"[\p{Pc}\p{Pd}\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}]")]
		[DataRow(@"\p{S}", @"[\p{Sm}\p{Sc}\p{Sk}\p{So}]")]
		[DataRow(@"\p{Z}", @"[\p{Zs}\p{Zl}\p{Zp}]")]
		[DataRow(@"\p{C}", @"[\p{Cc}\p{Cf}\p{Cs}\p{Co}\p{Cn}]")]
		[DataRow(@"\S\p{Z}", @"[\0-\b\u000E-\u001F!-\uFFFF\p{Zs}\p{Zl}\p{Zp}]")]
		[DataRow(@"\p{Z}\S", @"[\0-\b\u000E-\u001F!-\uFFFF\p{Zs}\p{Zl}\p{Zp}]")]
		[DataRow(@"\P{Z}\p{Zs}", @"[\P{Zl,Zp}]")]
		[DataRow(@"\S\p{Z}\P{Zs}", @"[\0-\uFFFF]")]
		[DataRow(@"\p{Z}\S\P{Zs}", @"[\0-\uFFFF]")]
		[DataRow(@"0-9,a-zA-Z\w", @"[,0-9A-Z_a-z\u0130]")]
		[DataRow(@"0-;\d", @"[0-;]")]
		[DataRow(@"--;\d", @"[\--;]")]
		[DataRow(@"--9\d", @"[\--9]")]
		[DataRow(@"a-z-[e-g]", @"[a-dh-z]")]
		[DataRow(@"a-z-[a-z]", @"[]")]
		[DataRow(@"e-g-[a-z]", @"[]")]
		[DataRow(@"^a-z-[e-g]", @"[^a-z]")]
		[DataRow(@"^a-z-[a-z]", @"[^a-z]")]
		[DataRow(@"^a-z-[0-9]", @"[^0-9a-z]")]
		[DataRow(@"^a-z-[^e-g]", @"[]")]
		[DataRow(@"^e-g-[^a-z]", @"[a-dh-z]")]
		[DataRow(@"\p{Z}-[\p{Zs}]", @"[\p{Zl}\p{Zp}]")]
		[DataRow(@"\p{Z}-[\p{Z}]", @"[]")]
		[DataRow(@"\p{Z}-[\P{Zs}]", @"[\p{Zs}]")]
		[DataRow(@"\p{Z}-[\P{Z}]", @"[\p{Zs}\p{Zl}\p{Zp}]")]
		[DataRow(@"\p{Zs}-[\p{Z}]", @"[]")]
		[DataRow(@"\p{Zs}-[\P{Z}]", @"[\p{Zs}]")]
		[DataRow(@"\P{Z}-[\p{Zs}]", @"[\P{Zs,Zl,Zp}]")]
		[DataRow(@"\P{Z}-[\p{Z}]", @"[\P{Zs,Zl,Zp}]")]
		[DataRow(@"\P{Z}-[\P{Zs}]", @"[]")]
		[DataRow(@"\P{Z}-[\P{Z}]", @"[]")]
		[DataRow(@"\P{Zs}-[\p{Z}]", @"[\P{Zs,Zl,Zp}]")]
		[DataRow(@"\P{Zs}-[\P{Z}]", @"[\p{Zl}\p{Zp}]")]
		[DataRow(@"a-z\p{Lu}\p{Ll}-[\p{Ll}]", @"[\p{Lu}]")]
		[DataRow(@"-[aeiou]", @"[\-[aeiou]")]
		public void TestParseECMA(string pattern, string expected)
		{
			RegexCharClass charClass = RegexCharClass.Parse(pattern, RegexOptions.ECMAScript);
			Assert.AreEqual(expected, charClass.ToString());
		}

		/// <summary>
		/// 对 <see cref="RegexCharClass.Parse"/> <see cref="RegexOptions.ECMAScript"/> 和
		/// <see cref="RegexOptions.IgnoreCase"/> 方法进行测试。
		/// </summary>
		[DataTestMethod]
		[DataRow(@"", @"[]")]
		[DataRow(@"^", @"[^]")]
		[DataRow(@"aeiou", @"[AEIOUaeiou]")]
		[DataRow(@"^aeiou", @"[^AEIOUaeiou]")]
		[DataRow(@"abc", @"[A-Ca-c]")]
		[DataRow(@"a-c", @"[A-Ca-c]")]
		[DataRow(@"zciablpw;zpb[qob\]c", @"[;A-CILO-QWZ[\]a-cilo-qwz]")]
		[DataRow(@"\a\b\t\r\v\f\n\e\3\60\061\101\x32\*\u0033\cb\cD\c_\[", @"[\u0002-\u0004\a-\r\e\u001F*0-3A[a]")]
		[DataRow(@"^-c", @"[^\-Cc]")]
		[DataRow(@"^c-", @"[^\-Cc]")]
		[DataRow(@"^--c", @"[^\--z]")]
		[DataRow(@"\w", @"[0-9A-Z_a-z\u0130]")]
		[DataRow(@"\W", @"[\0-/:-@[-^`{-\u012F\u0131-\uFFFF]")]
		[DataRow(@"\d", @"[0-9]")]
		[DataRow(@"\D", @"[\0-/:-\uFFFF]")]
		[DataRow(@"\s", @"[\t-\r ]")]
		[DataRow(@"\S", @"[\0-\b\u000E-\u001F!-\uFFFF]")]
		[DataRow(@"\p{P}\d", @"[0-9\p{Pc}\p{Pd}\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}]")]
		[DataRow(@"^\p{P}\d", @"[^0-9\p{Pc}\p{Pd}\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}]")]
		[DataRow(@"\s\p{P}", @"[\t-\r \p{Pc}\p{Pd}\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}]")]
		[DataRow(@"\p{L}", @"[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}]")]
		[DataRow(@"\p{M}", @"[\p{Mn}\p{Mc}\p{Me}]")]
		[DataRow(@"\p{N}", @"[\p{Nd}\p{Nl}\p{No}]")]
		[DataRow(@"\p{P}", @"[\p{Pc}\p{Pd}\p{Ps}\p{Pe}\p{Pi}\p{Pf}\p{Po}]")]
		[DataRow(@"\p{S}", @"[\p{Sm}\p{Sc}\p{Sk}\p{So}]")]
		[DataRow(@"\p{Z}", @"[\p{Zs}\p{Zl}\p{Zp}]")]
		[DataRow(@"\p{C}", @"[\p{Cc}\p{Cf}\p{Cs}\p{Co}\p{Cn}]")]
		[DataRow(@"\S\p{Z}", @"[\0-\b\u000E-\u001F!-\uFFFF\p{Zs}\p{Zl}\p{Zp}]")]
		[DataRow(@"\p{Z}\S", @"[\0-\b\u000E-\u001F!-\uFFFF\p{Zs}\p{Zl}\p{Zp}]")]
		[DataRow(@"\P{Z}\p{Zs}", @"[\P{Zl,Zp}]")]
		[DataRow(@"\S\p{Z}\P{Zs}", @"[\0-\uFFFF]")]
		[DataRow(@"\p{Z}\S\P{Zs}", @"[\0-\uFFFF]")]
		[DataRow(@"0-9,a-zA-Z\w", @"[,0-9A-Z_a-z\u0130]")]
		[DataRow(@"0-;\d", @"[0-;]")]
		[DataRow(@"--;\d", @"[\--;]")]
		[DataRow(@"--9\d", @"[\--9]")]
		[DataRow(@"a-z-[e-g]", @"[A-DH-Za-dh-z]")]
		[DataRow(@"a-z-[a-z]", @"[]")]
		[DataRow(@"e-g-[a-z]", @"[]")]
		[DataRow(@"^a-z-[e-g]", @"[^A-Za-z]")]
		[DataRow(@"^a-z-[a-z]", @"[^A-Za-z]")]
		[DataRow(@"^a-z-[0-9]", @"[^0-9A-Za-z]")]
		[DataRow(@"^a-z-[^e-g]", @"[]")]
		[DataRow(@"^e-g-[^a-z]", @"[A-DH-Za-dh-z]")]
		[DataRow(@"\p{Z}-[\p{Zs}]", @"[\p{Zl}\p{Zp}]")]
		[DataRow(@"\p{Z}-[\p{Z}]", @"[]")]
		[DataRow(@"\p{Z}-[\P{Zs}]", @"[\p{Zs}]")]
		[DataRow(@"\p{Z}-[\P{Z}]", @"[\p{Zs}\p{Zl}\p{Zp}]")]
		[DataRow(@"\p{Zs}-[\p{Z}]", @"[]")]
		[DataRow(@"\p{Zs}-[\P{Z}]", @"[\p{Zs}]")]
		[DataRow(@"\P{Z}-[\p{Zs}]", @"[\P{Zs,Zl,Zp}]")]
		[DataRow(@"\P{Z}-[\p{Z}]", @"[\P{Zs,Zl,Zp}]")]
		[DataRow(@"\P{Z}-[\P{Zs}]", @"[]")]
		[DataRow(@"\P{Z}-[\P{Z}]", @"[]")]
		[DataRow(@"\P{Zs}-[\p{Z}]", @"[\P{Zs,Zl,Zp}]")]
		[DataRow(@"\P{Zs}-[\P{Z}]", @"[\p{Zl}\p{Zp}]")]
		[DataRow(@"a-z\p{Lu}\p{Ll}-[\p{Ll}]", @"[]")]
		[DataRow(@"-[aeiou]", @"[\-AEIOU[aeiou]")]
		public void TestParseECMAIgnoreCase(string pattern, string expected)
		{
			RegexCharClass charClass = RegexCharClass.Parse(pattern, RegexOptions.ECMAScript | RegexOptions.IgnoreCase);
			Assert.AreEqual(expected, charClass.ToString());
		}
	}
}

