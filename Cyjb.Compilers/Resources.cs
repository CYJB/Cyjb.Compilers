//------------------------------------------------------------------------------
// <auto-generated>
// 此代码由工具生成。
//
// 对此文件的更改可能会导致不正确的行为，并且如果
// 重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cyjb.Compilers;

using CompilerServices = global::System.Runtime.CompilerServices;
using ComponentModel = global::System.ComponentModel;
using Diagnostics = global::System.Diagnostics;
using ResourceManager = global::System.Resources.ResourceManager;
using CultureInfo = global::System.Globalization.CultureInfo;

/// <summary>
/// 一个强类型的资源类，用于查找本地化的字符串等。
/// </summary>
/// <remarks>此类是由 T4 文本模板通过 Visual Studio 的工具自动生成的。
/// 若要添加或移除成员，请编辑 .ResX 文件，然后重新运行 T4 模板。
/// </remarks>
[Diagnostics.DebuggerNonUserCodeAttribute()]
[CompilerServices.CompilerGeneratedAttribute()]
internal partial class Resources
{
	#nullable enable

	private static ResourceManager? resourceManager;
	private static CultureInfo? resourceCulture;

	/// <summary>
	/// 获取此类使用的缓存的 <see cref="ResourceManager"/> 实例。
	/// </summary>
	[ComponentModel.EditorBrowsableAttribute(ComponentModel.EditorBrowsableState.Advanced)]
	internal static ResourceManager ResourceManager
	{
		get
		{
			if (object.ReferenceEquals(resourceManager, null))
			{
				resourceManager = new ResourceManager("Cyjb.Compilers.Resources", typeof(Resources).Assembly);
			}
			return resourceManager;
		}
	}

	/// <summary>
	/// 获取或设置资源使用的区域信息。
	/// </summary>
	[ComponentModel.EditorBrowsableAttribute(ComponentModel.EditorBrowsableState.Advanced)]
	internal static CultureInfo? Culture
	{
		get
		{
			return resourceCulture;
		}
		set
		{
			resourceCulture = value;
		}
	}
	
	/// <summary>
	/// 返回类似 <c>Accept action is conflicted with Reject action.</c> 的本地化字符串。
	/// </summary>
	internal static string ConflictingAcceptAction => ResourceManager.GetString("ConflictingAcceptAction", resourceCulture)!;
	
	/// <summary>
	/// 返回类似 <c>Reject action is conflicted with Accept action.</c> 的本地化字符串。
	/// </summary>
	internal static string ConflictingRejectAction => ResourceManager.GetString("ConflictingRejectAction", resourceCulture)!;
	
	/// <summary>
	/// 返回类似 <c>Can not call GetPosition before UseLineLocator.</c> 的本地化字符串。
	/// </summary>
	internal static string GetPositionBeforeUse => ResourceManager.GetString("GetPositionBeforeUse", resourceCulture)!;
	
	/// <summary>
	/// 返回类似 <c>Invalid lexer context '{0}'.</c> 的本地化字符串。
	/// </summary>
	internal static string InvalidLexerContext(object? arg0)
	{
		return string.Format(resourceCulture, ResourceManager.GetString("InvalidLexerContext", resourceCulture)!, arg0);
	}
	
	/// <summary>
	/// 返回类似 <c>Invalid lexer kind.</c> 的本地化字符串。
	/// </summary>
	internal static string InvalidLexerKind => ResourceManager.GetString("InvalidLexerKind", resourceCulture)!;
	
	/// <summary>
	/// 返回类似 <c>Reject action is not supported by current TokenReader<T>.</c> 的本地化字符串。
	/// </summary>
	internal static string NotRejectable => ResourceManager.GetString("NotRejectable", resourceCulture)!;
	
	/// <summary>
	/// 返回类似 <c>Unrecognized token '{0}' at {1}.</c> 的本地化字符串。
	/// </summary>
	internal static string UnrecognizedToken(object? arg0, object? arg1)
	{
		return string.Format(resourceCulture, ResourceManager.GetString("UnrecognizedToken", resourceCulture)!, arg0, arg1);
	}
	
	/// <summary>
	/// 将指定对象格式化为字符串。
	/// </summary>
	/// <param name="value">要格式化的对象。</param>
	private static object? Format(object? value)
	{
		if (value == null)
		{
			return "(null)";
		}
		return value;
	}

	#nullable restore

}

