//------------------------------------------------------------------------------
// <auto-generated>
// 此代码由工具生成。
//
// 对此文件的更改可能会导致不正确的行为，并且如果
// 重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Cyjb.Compilers.Parsers;

namespace TestCompilers.Parsers;

internal partial class TestProductionParser 
{
	/// <summary>
	/// 语法分析器的工厂。
	/// </summary>
	public static readonly IParserFactory<ProductionKind> Factory = CreateParserFactory();

	/// <summary>
	/// 创建语法分析器的工厂。
	/// </summary>
	[CompilerGeneratedAttribute]
	private static IParserFactory<ProductionKind> CreateParserFactory()
	{
		// 临时符号
		ProductionKind endOfFile = (ProductionKind)(-1);
		ProductionKind symbol_1 = (ProductionKind)(-2);
		ProductionKind symbol_2 = (ProductionKind)(-3);
		// 产生式数据
		ProductionData<ProductionKind>[] productions = new[]
		{
			new ProductionData<ProductionKind>(0,
				ProductionKind.AltExp,
				(TestProductionParser c) => c.OrAction(),
				ProductionKind.AltExp,
				ProductionKind.Or,
				ProductionKind.Exp),
			new ProductionData<ProductionKind>(1,
				symbol_1,
				ProductionAction.More,
				ProductionKind.Repeat),
			new ProductionData<ProductionKind>(1,
				symbol_1,
				ProductionAction.More,
				symbol_1,
				ProductionKind.Repeat),
			new ProductionData<ProductionKind>(2,
				ProductionKind.Exp,
				(TestProductionParser c) => c.ExpressionAction(),
				symbol_1),
			new ProductionData<ProductionKind>(3,
				ProductionKind.Item,
				(TestProductionParser c) => c.CopyTextAction(),
				ProductionKind.Id),
			new ProductionData<ProductionKind>(0,
				ProductionKind.AltExp,
				(TestProductionParser c) => c.CopyValueAction(),
				ProductionKind.Exp),
			new ProductionData<ProductionKind>(4,
				ProductionKind.Repeat,
				(TestProductionParser c) => c.CopyValueAction(),
				ProductionKind.Item),
			new ProductionData<ProductionKind>(3,
				ProductionKind.Item,
				(TestProductionParser c) => c.BraceAction(),
				ProductionKind.LBrace,
				ProductionKind.AltExp,
				ProductionKind.RBrace),
			new ProductionData<ProductionKind>(4,
				ProductionKind.Repeat,
				(TestProductionParser c) => c.RepeatAction(),
				ProductionKind.Item,
				ProductionKind.Plus),
			new ProductionData<ProductionKind>(4,
				ProductionKind.Repeat,
				(TestProductionParser c) => c.RepeatAction(),
				ProductionKind.Item,
				ProductionKind.Star),
			new ProductionData<ProductionKind>(4,
				ProductionKind.Repeat,
				(TestProductionParser c) => c.RepeatAction(),
				ProductionKind.Item,
				ProductionKind.Question),
			new ProductionData<ProductionKind>(5,
				symbol_2,
				null,
				ProductionKind.AltExp)
		};
		// 状态数据
		ParserStateData<ProductionKind>[] states = new ParserStateData<ProductionKind>[16];
		// 0: 11 AltExp' -> •AltExp
		//    
		//    Id -> s6
		//    LBrace -> s7
		// 
		//    AltExp -> 1
		//    Exp -> 2
		//    Item -> 5
		//    Repeat -> 4
		//    Repeat+ -> 3
		Dictionary<ProductionKind, ParserAction> action_1 = new()
		{
			 { ProductionKind.Id, ParserAction.Shift(6) },
			 { ProductionKind.LBrace, ParserAction.Shift(7) }
		};
		HashSet<ProductionKind> expecting_1 = new()
		{
			ProductionKind.Id,
			ProductionKind.LBrace
		};
		states[0] = new ParserStateData<ProductionKind>(action_1,
			ParserAction.Error,
			expecting_1,
			productions[11],
			0);
		// 1: 11 AltExp' -> AltExp•
		//    0 AltExp -> AltExp •Or Exp
		//    
		//    Or -> s8
		//    EOF -> acc
		Dictionary<ProductionKind, ParserAction> action_2 = new()
		{
			 { endOfFile, ParserAction.Accept },
			 { ProductionKind.Or, ParserAction.Shift(8) }
		};
		HashSet<ProductionKind> expecting_2 = new()
		{
			endOfFile,
			ProductionKind.Or
		};
		states[1] = new ParserStateData<ProductionKind>(action_2,
			ParserAction.Error,
			expecting_2,
			productions[11],
			1);
		// 2: 5 AltExp -> Exp•
		//    
		//    Or -> r5
		//    RBrace -> r5
		//    EOF -> r5
		Dictionary<ProductionKind, ParserAction> action_3 = new();
		HashSet<ProductionKind> expecting_3 = new()
		{
			ProductionKind.RBrace,
			ProductionKind.Or,
			endOfFile
		};
		states[2] = new ParserStateData<ProductionKind>(action_3,
			ParserAction.Reduce(5),
			expecting_3,
			productions[5],
			1);
		// 3: 3 Exp -> Repeat+•
		//    2 Repeat+ -> Repeat+ •Repeat
		//    
		//    Id -> s6
		//    LBrace -> s7
		//    Or -> r3
		//    RBrace -> r3
		//    EOF -> r3
		// 
		//    Item -> 5
		//    Repeat -> 9
		HashSet<ProductionKind> expecting_4 = new()
		{
			ProductionKind.RBrace,
			ProductionKind.Or,
			endOfFile,
			ProductionKind.Id,
			ProductionKind.LBrace
		};
		states[3] = new ParserStateData<ProductionKind>(action_1,
			ParserAction.Reduce(3),
			expecting_4,
			productions[3],
			1);
		// 4: 1 Repeat+ -> Repeat•
		//    
		//    Id -> r1
		//    LBrace -> r1
		//    Or -> r1
		//    RBrace -> r1
		//    EOF -> r1
		states[4] = new ParserStateData<ProductionKind>(action_3,
			ParserAction.Reduce(1),
			expecting_4,
			productions[1],
			1);
		// 5: 6 Repeat -> Item•
		//    8 Repeat -> Item •Plus
		//    9 Repeat -> Item •Star
		//    10 Repeat -> Item •Question
		//    
		//    Id -> r6
		//    LBrace -> r6
		//    Or -> r6
		//    Plus -> s10
		//    Question -> s12
		//    RBrace -> r6
		//    Star -> s11
		//    EOF -> r6
		Dictionary<ProductionKind, ParserAction> action_4 = new()
		{
			 { ProductionKind.Plus, ParserAction.Shift(10) },
			 { ProductionKind.Star, ParserAction.Shift(11) },
			 { ProductionKind.Question, ParserAction.Shift(12) }
		};
		HashSet<ProductionKind> expecting_5 = new()
		{
			ProductionKind.RBrace,
			ProductionKind.Or,
			ProductionKind.Id,
			ProductionKind.LBrace,
			endOfFile,
			ProductionKind.Plus,
			ProductionKind.Star,
			ProductionKind.Question
		};
		states[5] = new ParserStateData<ProductionKind>(action_4,
			ParserAction.Reduce(6),
			expecting_5,
			productions[6],
			1);
		// 6: 4 Item -> Id•
		//    
		//    Id -> r4
		//    LBrace -> r4
		//    Or -> r4
		//    Plus -> r4
		//    Question -> r4
		//    RBrace -> r4
		//    Star -> r4
		//    EOF -> r4
		states[6] = new ParserStateData<ProductionKind>(action_3,
			ParserAction.Reduce(4),
			expecting_5,
			productions[4],
			1);
		// 7: 7 Item -> LBrace •AltExp RBrace
		//    
		//    Id -> s6
		//    LBrace -> s7
		// 
		//    AltExp -> 13
		//    Exp -> 2
		//    Item -> 5
		//    Repeat -> 4
		//    Repeat+ -> 3
		states[7] = new ParserStateData<ProductionKind>(action_1,
			ParserAction.Error,
			expecting_1,
			productions[7],
			1);
		// 8: 0 AltExp -> AltExp Or •Exp
		//    
		//    Id -> s6
		//    LBrace -> s7
		// 
		//    Exp -> 14
		//    Item -> 5
		//    Repeat -> 4
		//    Repeat+ -> 3
		states[8] = new ParserStateData<ProductionKind>(action_1,
			ParserAction.Error,
			expecting_1,
			productions[0],
			2);
		// 9: 2 Repeat+ -> Repeat+ Repeat•
		//    
		//    Id -> r2
		//    LBrace -> r2
		//    Or -> r2
		//    RBrace -> r2
		//    EOF -> r2
		states[9] = new ParserStateData<ProductionKind>(action_3,
			ParserAction.Reduce(2),
			expecting_4,
			productions[2],
			2);
		// 10: 8 Repeat -> Item Plus•
		//     
		//     Id -> r8
		//     LBrace -> r8
		//     Or -> r8
		//     RBrace -> r8
		//     EOF -> r8
		states[10] = new ParserStateData<ProductionKind>(action_3,
			ParserAction.Reduce(8),
			expecting_4,
			productions[8],
			2);
		// 11: 9 Repeat -> Item Star•
		//     
		//     Id -> r9
		//     LBrace -> r9
		//     Or -> r9
		//     RBrace -> r9
		//     EOF -> r9
		states[11] = new ParserStateData<ProductionKind>(action_3,
			ParserAction.Reduce(9),
			expecting_4,
			productions[9],
			2);
		// 12: 10 Repeat -> Item Question•
		//     
		//     Id -> r10
		//     LBrace -> r10
		//     Or -> r10
		//     RBrace -> r10
		//     EOF -> r10
		states[12] = new ParserStateData<ProductionKind>(action_3,
			ParserAction.Reduce(10),
			expecting_4,
			productions[10],
			2);
		// 13: 7 Item -> LBrace AltExp •RBrace
		//     0 AltExp -> AltExp •Or Exp
		//     
		//     Or -> s8
		//     RBrace -> s15
		Dictionary<ProductionKind, ParserAction> action_5 = new()
		{
			 { ProductionKind.RBrace, ParserAction.Shift(15) },
			 { ProductionKind.Or, ParserAction.Shift(8) }
		};
		HashSet<ProductionKind> expecting_6 = new()
		{
			ProductionKind.RBrace,
			ProductionKind.Or
		};
		states[13] = new ParserStateData<ProductionKind>(action_5,
			ParserAction.Error,
			expecting_6,
			productions[7],
			2);
		// 14: 0 AltExp -> AltExp Or Exp•
		//     
		//     Or -> r0
		//     RBrace -> r0
		//     EOF -> r0
		states[14] = new ParserStateData<ProductionKind>(action_3,
			ParserAction.Reduce(0),
			expecting_3,
			productions[0],
			3);
		// 15: 7 Item -> LBrace AltExp RBrace•
		//     
		//     Id -> r7
		//     LBrace -> r7
		//     Or -> r7
		//     Plus -> r7
		//     Question -> r7
		//     RBrace -> r7
		//     Star -> r7
		//     EOF -> r7
		states[15] = new ParserStateData<ProductionKind>(action_3,
			ParserAction.Reduce(7),
			expecting_5,
			productions[7],
			3);
		// GOTO 表的起始索引
		int[] gotoMap = new[]
		{
			0, 3, 1, 14, 12, short.MinValue
		};
		// GOTO 表的转移
		int[] gotoTrans = new[]
		{
			0, 1, 2, 2, -1, -1, 1, 3, -1, -1, -1, -1, -1, -1, 0, 13, 2, 2, 2, 14, 1, 3, 1, 3,
			4, 4, -1, -1, 3, 5, 4, 9, -1, -1, 3, 5, -1, -1, 4, 4, 4, 4, 3, 5, 3, 5
		};
		// 语法分析器的数据
		ParserData<ProductionKind> parserData = new(productions,
			null,
			states,
			gotoMap,
			gotoTrans);
		return new ParserFactory<ProductionKind, TestProductionParser>(parserData);
	}
}



