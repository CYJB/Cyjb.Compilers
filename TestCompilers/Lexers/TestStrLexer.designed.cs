//------------------------------------------------------------------------------
// <auto-generated>
// 此代码由工具生成。
//
// 对此文件的更改可能会导致不正确的行为，并且如果
// 重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Globalization;
using System.Runtime.CompilerServices;
using Cyjb.Compilers.Lexers;

namespace TestCompilers.Lexers;

public partial class TestStrLexer 
{
	/// <summary>
	/// 词法分析器的工厂。
	/// </summary>
	[CompilerGeneratedAttribute]
	public static readonly ILexerFactory<Str> Factory = CreateLexerFactory();

	/// <summary>
	/// 创建词法分析器的工厂。
	/// </summary>
	[CompilerGeneratedAttribute]
	private static ILexerFactory<Str> CreateLexerFactory()
	{
		// 终结符数据
		TerminalData<Str>[] terminals = new[]
		{
			// 0: {regular_literal}|{verbatim_literal}
			new TerminalData<Str>(Str.Str)
		};
		// 字符类信息
		// 0: ["]
		// 1: [\0-\t\v\f\u000E-!#-?A-[]-\u0084\u0086-‧\u202A-\uFFFE]
		// 2: [\\]
		// 3: [\u0085\p{Zl}\p{Zp}]
		// 4: [@]
		// 5: [\n\r]
		// 字符类索引
		uint[] indexes = new[]
		{
			8716421U, 10493991U, 539688958U
		};
		// 字符类列表
		int[] classes = new[]
		{
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1
		};
		// 字符类 Unicode 类别
		Dictionary<UnicodeCategory, int> categories = new()
		{
			 { UnicodeCategory.LineSeparator, 3 },
			 { UnicodeCategory.ParagraphSeparator, 3 },
			 { UnicodeCategory.Control, 1 }
		};
		// 状态转移
		//    0  1  2  3  4  5 -> Symbols
		// 0  1           2   
		// 1  5  1  6     1   
		// 2  3               
		// 3  4  3  3  3  3  3
		// 4  3                -> 0
		// 5                   -> 0
		// 6  1  1  1  1  1   
		// 状态列表
		int[] states = new[]
		{
			0, -1, 0, 0, 1, -1, 0, 0,
			6, -1, 0, 0, 7, -1, 0, 0,
			13, -1, 1, 28, short.MinValue, -1, 1, 28,
			14, -1, 0, 0, 0
		};
		// 状态转移
		int[] trans = new[]
		{
			0, 1, 1, 5, 1, 1, 1, 6, 0, 2, 1, 1,
			2, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3,
			3, 3, 4, 3, 6, 1, 6, 1, 6, 1, 6, 1,
			6, 1
		};
		// 词法分析器的数据
		LexerData<Str> lexerData = new(null,
			terminals,
			new CharClassMap(indexes, classes, categories),
			states,
			trans,
			TrailingType.None,
			false,
			false,
			typeof(TestStrLexer));
		return new LexerFactory<Str, TestStrLexer>(lexerData);
	}
}



