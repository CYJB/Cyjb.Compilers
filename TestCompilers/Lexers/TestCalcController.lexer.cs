//------------------------------------------------------------------------------
// <auto-generated>
// 此代码由工具生成。
//
// 对此文件的更改可能会导致不正确的行为，并且如果
// 重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using Cyjb.Compilers.Lexers;
using System;
using System.Collections.Generic;
using System.Globalization;
using Cyjb.Text;

namespace TestCompilers.Lexers
{
	public partial class TestCalcController 
	{
		/// <summary>
		/// 词法分析器的工厂。
		/// </summary>
		public static readonly ILexerFactory<Calc> Factory = CreateLexerFactory();

		/// <summary>
		/// 创建词法分析器的工厂。
		/// </summary>
		[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
		private static ILexerFactory<Calc> CreateLexerFactory()
		{
			// 上下文数据
			Dictionary<string, ContextData<Calc>> contexts = new()
			{
				{ "Initial", new ContextData<Calc>(0, "Initial") }
			};
			// 终结符数据
			TerminalData<Calc>[] terminals = new[]
			{
				new TerminalData<Calc>(Calc.Add),
				new TerminalData<Calc>(Calc.Sub),
				new TerminalData<Calc>(Calc.Mul),
				new TerminalData<Calc>(Calc.Div),
				new TerminalData<Calc>(Calc.Pow),
				new TerminalData<Calc>(Calc.LBrace),
				new TerminalData<Calc>(Calc.RBrace),
				new TerminalData<Calc>(Calc.RBrace),
				new TerminalData<Calc>(Calc.RBrace),
				new TerminalData<Calc>(),
				new TerminalData<Calc>(Calc.Id, (TestCalcController c) => c.DigitAction())
			};
			// 字符类索引
			int[] indexes = new[]
			{
				8716421, 10557055, 377561087, 537600039, 539631662, 540024926, 543174655, 805427199,
				-117374977
			};
			// 字符类列表
			int[] classes = new[]
			{
				0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 6, 7, 3, 1, 0, 2, 0, 4,
				9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0
			};
			// 字符类 Unicode 类别
			Dictionary<UnicodeCategory, int> categories = new()
			{
				{ UnicodeCategory.SpaceSeparator, 8 },
				{ UnicodeCategory.LineSeparator, 8 },
				{ UnicodeCategory.ParagraphSeparator, 8 },
				{ UnicodeCategory.Control, 0 },
				{ UnicodeCategory.Surrogate, 0 },
				{ UnicodeCategory.PrivateUse, 0 }
			};
			// 状态列表
			DfaStateData[] states = new[]
			{
				new DfaStateData(-1, -1),
				new DfaStateData(int.MinValue, -1, 0),
				new DfaStateData(int.MinValue, -1, 1),
				new DfaStateData(int.MinValue, -1, 2),
				new DfaStateData(int.MinValue, -1, 3),
				new DfaStateData(int.MinValue, -1, 4),
				new DfaStateData(int.MinValue, -1, 5),
				new DfaStateData(int.MinValue, -1, 6, 7, 8),
				new DfaStateData(int.MinValue, -1, 9),
				new DfaStateData(0, -1, 10)
			};
			// 后继状态列表
			int[] next = new[]
			{
				1, 2, 3, 4, 5, 6, 7, 8, 9, 9
			};
			// 状态检查列表
			int[] check = new[]
			{
				0, 0, 0, 0, 0, 0, 0, 0, 0, 9
			};
			// 词法分析器的数据
			LexerData<Calc> lexerData = new(contexts,
				terminals,
				new CharClassMap(indexes, classes, categories),
				states,
				next,
				check,
				TrailingType.None,
				false,
				false,
				typeof(TestCalcController));
			return new LexerFactory<Calc, TestCalcController>(lexerData);
		}

	}

}
