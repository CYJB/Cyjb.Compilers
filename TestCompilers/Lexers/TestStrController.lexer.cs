//------------------------------------------------------------------------------
// <auto-generated>
// 此代码由工具生成。
//
// 对此文件的更改可能会导致不正确的行为，并且如果
// 重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using Cyjb.Compilers.Lexers;
using System.Collections.Generic;
using System.Globalization;

namespace TestCompilers.Lexers;
public partial class TestStrController 
{
	/// <summary>
	/// 词法分析器的工厂。
	/// </summary>
	public static readonly ILexerFactory<Str> Factory = CreateLexerFactory();

	/// <summary>
	/// 创建词法分析器的工厂。
	/// </summary>
	[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]
	private static ILexerFactory<Str> CreateLexerFactory()
	{
		// 上下文数据
		Dictionary<string, ContextData<Str>> contexts = new()
		{
			 { "Initial", new ContextData<Str>(0, "Initial") }
		};
		// 终结符数据
		TerminalData<Str>[] terminals = new[]
		{
			// 0: {regular_literal}|{verbatim_literal}
			new TerminalData<Str>(Str.Str)
		};
		// 字符类信息
		// 0: [\n\r]
		// 1: ["]
		// 2: [\0-\t\v\f\u000E-!#-?A-[]-\u0084\u0086-?\u202A-\uFFFF]
		// 3: [\\]
		// 4: [\u0085\u2028\u2029]
		// 5: [@]
		// 字符类索引
		int[] indexes = new[]
		{
			8716421, 10493991, 539688959
		};
		// 字符类列表
		int[] classes = new[]
		{
			2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
			2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
			2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2,
			2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 2,
			2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
			2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2
		};
		// 字符类 Unicode 类别
		Dictionary<UnicodeCategory, int> categories = new()
		{
			 { UnicodeCategory.Control, 2 },
			 { UnicodeCategory.LineSeparator, 4 },
			 { UnicodeCategory.ParagraphSeparator, 4 }
		};
		// 状态转移
		//    0  1  2  3  4  5 -> Symbols
		// 0     1           2
		// 1     5  1  6     1
		// 2     3            
		// 3  3  4  3  3  3  3
		// 4     3             -> 0
		// 5                   -> 0
		// 6     1  1  1  1  1
		// 状态列表
		DfaStateData[] states = new[]
		{
			new DfaStateData(-1, -1),
			new DfaStateData(0, -1),
			new DfaStateData(5, -1),
			new DfaStateData(7, -1),
			new DfaStateData(12, -1, 0),
			new DfaStateData(int.MinValue, -1, 0),
			new DfaStateData(13, -1)
		};
		// 后继状态列表
		int[] next = new[]
		{
			1, 5, 1, 6, 2, 1, 3, 3, 4, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1
		};
		// 状态检查列表
		int[] check = new[]
		{
			0, 1, 1, 1, 0, 1, 2, 3, 3, 3, 3, 3, 3, 4, 6, 6, 6, 6, 6
		};
		// 词法分析器的数据
		LexerData<Str> lexerData = new(contexts,
			terminals,
			new CharClassMap(indexes, classes, categories),
			states,
			next,
			check,
			TrailingType.None,
			false,
			false,
			typeof(TestStrController));
		return new LexerFactory<Str, TestStrController>(lexerData);
	}
}


